package com.dbexperts.oracle.cache;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import oracle.jdbc.OracleConnection;
import oracle.jdbc.OracleDriver;
import oracle.jdbc.OracleStatement;
import oracle.jdbc.dcn.DatabaseChangeEvent;
import oracle.jdbc.dcn.DatabaseChangeListener;
import oracle.jdbc.dcn.DatabaseChangeRegistration;

public class DBChangeNotification
{
	// todo commmented out while reverting to 10.2 jdbc driver
  static final String USERNAME= "scott";
  static final String PASSWORD= "tiger";
  static String URL  =  "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=localhost)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=DEV11B)))";


  public static void main(final String[] argv)
  {
//    if(argv.length < 1)
//    {
//      System.out.println("Error: You need to provide the URL in the first argument.");
////      System.out.println("  For example: > java -classpath .:ojdbc5.jar DBChangeNotification \"jdbc:oracle:thin:
////@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=yourhost.yourdomain.com)(PORT=1521))(CONNECT_DATA=
////(SERVICE_NAME=yourservicename)))\"");
//  //  "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=yourhost.yourdomain.com)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=yourservicename)))";
//      System.exit(1);
//    }

    final DBChangeNotification demo = new DBChangeNotification();
    try
    {
      demo.run();
    }
    catch(final SQLException mainSQLException )
    {
      mainSQLException.printStackTrace();
    }
  }

  void run() throws SQLException
  {
    final OracleConnection conn = connect();

    // first step: create a registration on the server:
    final Properties prop = new Properties();

    // if connected through the VPN, you need to provide the TCP address of the client.
    // For example:
    // prop.setProperty(OracleConnection.NTF_LOCAL_HOST,"14.14.13.12");

    // Ask the server to send the ROWIDs as part of the DCN events (small performance
    // cost):
    prop.setProperty(OracleConnection.DCN_NOTIFY_ROWIDS,"true");
    java.sql.DatabaseMetaData dm = null;

     dm = conn.getMetaData();
     System.out.println("\nDriver Information");
     System.out.println("\tDriver Name: "+ dm.getDriverName());
     System.out.println("\tDriver Version: "+ dm.getDriverVersion ());
     System.out.println(dm.getDriverMajorVersion());
     System.out.println(dm.getDatabaseMinorVersion());
    // The following operation does a roundtrip to the database to create a new
    // registration for DCN. It sends the client address (ip address and port) that
    // the server will use to connect to the client and send the notification
    // when necessary. Note that for now the registration is empty (we haven't registered
    // any table). This also opens a new thread in the drivers. This thread will be
    // dedicated to DCN (accept connection to the server and dispatch the events to
    // the listeners).
    final DatabaseChangeRegistration dcr = conn.registerDatabaseChangeNotification(prop);

    try
    {
      // add the listenerr:
      final DCNDemoListener list = new DCNDemoListener(this);
      dcr.addListener(list);
//      ChangeLogger cl = new ChangeLogger(this);
//      dcr.addListener(cl);

      // second step: add objects in the registration:
      final Statement stmt = conn.createStatement();
      // associate the statement with the registration:
      ((OracleStatement)stmt).setDatabaseChangeRegistration(dcr);
      final ResultSet rs = stmt.executeQuery("select * from dept where deptno='45'");
      while (rs.next())
      {}
      final String[] tableNames = dcr.getTables();
      for(int i=0;i<tableNames.length;i++) {
		System.out.println(tableNames[i]+" is part of the registration.");
	}
      rs.close();
      stmt.close();
    }
    catch(final SQLException ex)
    {
      // if an exception occurs, we need to close the registration in order
      // to interrupt the thread otherwise it will be hanging around.
     // if(conn != null)
        conn.unregisterDatabaseChangeNotification(dcr);
      throw ex;
    }
    finally
    {
      try
      {
        // Note that we close the connection!
        conn.close();
      }
      catch(final Exception innerex){ innerex.printStackTrace(); }
    }

    synchronized( this )
    {
      // The following code modifies the dept table and commits:
      try
      {
        final OracleConnection conn2 = connect();
        conn2.setAutoCommit(false);
        final Statement stmt2 = conn2.createStatement();
        stmt2.executeUpdate("insert into dept (deptno,dname) values ('45','cool dept')",Statement.RETURN_GENERATED_KEYS);
        ResultSet autoGeneratedKey = stmt2.getGeneratedKeys();
        if(autoGeneratedKey.next()) {
			System.out.println("inserted one row with ROWID="+autoGeneratedKey.getString(1));
		}
        stmt2.executeUpdate("insert into dept (deptno,dname) values ('50','fun dept')",Statement.RETURN_GENERATED_KEYS);
        autoGeneratedKey = stmt2.getGeneratedKeys();
        if(autoGeneratedKey.next()) {
			System.out.println("inserted one row with ROWID="+autoGeneratedKey.getString(1));
		}
        stmt2.close();
        conn2.commit();
        conn2.close();
      }
      catch(final SQLException ex) { ex.printStackTrace(); }

      // wait until we get the event
      try{ this.wait();} catch( final InterruptedException ie ) {}
    }

    // At the end: close the registration (comment out these 3 lines in order
    // to leave the registration open).
    final OracleConnection conn3 = connect();
    conn3.unregisterDatabaseChangeNotification(dcr);
    conn3.close();
  }

  /**
   * Creates a connection the database.
   */
  OracleConnection connect() throws SQLException
  {
    final OracleDriver dr = new OracleDriver();
    final Properties prop = new Properties();
    prop.setProperty("user",DBChangeNotification.USERNAME);
    prop.setProperty("password",DBChangeNotification.PASSWORD);
    return (OracleConnection)dr.connect(DBChangeNotification.URL,prop);
  }
}
/**
 * DCN listener: it prints out the event details in stdout.
 */
class DCNDemoListener implements DatabaseChangeListener
{
  DBChangeNotification demo;
  DCNDemoListener(final DBChangeNotification dem)
  {
    demo = dem;
  }

  public void onDatabaseChangeNotification(final DatabaseChangeEvent e)
  {
    final Thread t = Thread.currentThread();
    System.out.println("DCNDemoListener: got an event ("+ this + " running on thread "+t+")");
    System.out.println(e.toString());
    synchronized( demo ){ demo.notify();}
  }
}